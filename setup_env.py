#!/usr/bin/env python3
"""
Environment Setup Script for Electricity Dashboard
This script helps create .env files for different environments.
"""

import os
import argparse
import secrets

# --- Configuration Settings ---

# Base configuration shared across environments
base_config = {
    "DB_HOST": "178.236.33.157",
    "DB_PORT": "3306",
    "DB_USER": "team_data",
    "DB_PASSWORD": "StrongPassword123!",
    "DB_NAME": "electrodata",
    "ANALYSIS_API_HOST": "178.236.33.157",
    "ANALYSIS_API_PORT": "8000",
    "VITE_APP_NAME": "Electricity Dashboard",
    "VITE_APP_VERSION": "1.0.0"
}

# Environment-specific configurations
environments = {
    "local": {
        # Backend settings for local development
        "FLASK_ENV": "development",
        "FLASK_DEBUG": "True",
        "FLASK_PORT": "5000",
        "FLASK_HOST": "127.0.0.1",
        "SECRET_KEY": "my-secret-key-for-local-development",
        "FRONTEND_URL": "http://localhost:5173",
        # Frontend settings
        "VITE_API_BASE_URL": "http://localhost:5000/api"
    },
    "server": {
        # Backend settings for production server
        "FLASK_ENV": "production",
        "FLASK_DEBUG": "False",
        "FLASK_PORT": "5000",
        "FLASK_HOST": "127.0.0.1",  # Recommended to run behind a reverse proxy
        "SECRET_KEY": secrets.token_hex(24), # Auto-generated for security
        "FRONTEND_URL": "http://178.236.33.157", # Public domain/IP of frontend
        # Frontend settings
        "VITE_API_BASE_URL": "http://178.236.33.157/api" # Public API endpoint
    }
}

def generate_env_content(config, is_backend):
    """Generates the content for a .env file from a config dictionary."""
    content = []
    if is_backend:
        backend_keys = ["FLASK_ENV", "FLASK_DEBUG", "FLASK_PORT", "FLASK_HOST", "SECRET_KEY", 
                        "DB_HOST", "DB_PORT", "DB_USER", "DB_PASSWORD", "DB_NAME", 
                        "FRONTEND_URL", "ANALYSIS_API_HOST", "ANALYSIS_API_PORT"]
        for key in backend_keys:
            if key in config:
                content.append(f'{key}="{config[key]}"')
    else: # Frontend
        frontend_keys = ["VITE_API_BASE_URL", "VITE_APP_NAME", "VITE_APP_VERSION"]
        for key in frontend_keys:
             if key in config:
                content.append(f'{key}="{config[key]}"')
    return "\n".join(content)

def write_env_file(path, content, env_name):
    """Writes content to a .env file."""
    try:
        with open(path, "w") as f:
            f.write(f"# This file was auto-generated for the '{env_name}' environment.\n")
            f.write("# Do not edit this file manually if you want to switch environments.\n")
            f.write("# Instead, re-run `python setup_env.py --env <environment>`.\n\n")
            f.write(content)
        print(f"‚úÖ Created/Updated {path} for '{env_name}' environment.")
    except IOError as e:
        print(f"‚ùå Error writing to {path}: {e}")

def main():
    """Main setup function"""
    parser = argparse.ArgumentParser(description="Setup environment files for the project.")
    parser.add_argument(
        "--env", 
        choices=["local", "server"], 
        default="local", 
        help="Specify the environment to setup (default: local)."
    )
    args = parser.parse_args()
    env = args.env

    print(f"üîß Setting up environment files for '{env}'...\n")
    
    # Merge base config with environment-specific config
    config = {**base_config, **environments[env]}

    # --- Backend Setup ---
    print("üìÇ Backend:")
    backend_dir = "backend"
    backend_env_path = os.path.join(backend_dir, ".env")
    backend_content = generate_env_content(config, is_backend=True)
    write_env_file(backend_env_path, backend_content, env)
    
    # --- Frontend Setup ---
    print("\nüìÇ Frontend:")
    frontend_dir = "frontend"
    frontend_env_path = os.path.join(frontend_dir, ".env")
    frontend_content = generate_env_content(config, is_backend=False)
    write_env_file(frontend_env_path, frontend_content, env)
    
    print("\n‚ú® Environment setup complete!")
    print("\nüìù Next steps:")
    if env == "local":
        print("1. Start backend server: `cd backend && python main.py`")
        print("2. Start frontend server: `cd frontend && npm run dev`")
    else: # server
        print("1. Deploy the application to your server.")
        print("2. Ensure a reverse proxy (like Nginx) is set up to route requests:")
        print(f"   - Frontend (port 80) to the static files in `frontend/dist`.")
        print(f"   - API requests (e.g., /api) to the backend at http://{config['FLASK_HOST']}:{config['FLASK_PORT']}.")

if __name__ == "__main__":
    main() 